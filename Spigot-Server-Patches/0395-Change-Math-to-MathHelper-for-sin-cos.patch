From 5aa2daccdae397bc1043dc2d6a754c876b675581 Mon Sep 17 00:00:00 2001
From: LuckerCracker <luckerxd@yandex.ru>
Date: Wed, 11 May 2022 11:20:15 +0400
Subject: [PATCH] Change Math to MathHelper for sin/cos


diff --git a/src/main/java/net/minecraft/server/BiomeMesa.java b/src/main/java/net/minecraft/server/BiomeMesa.java
index 67f8ad8ed..f99eb22d2 100644
--- a/src/main/java/net/minecraft/server/BiomeMesa.java
+++ b/src/main/java/net/minecraft/server/BiomeMesa.java
@@ -89,7 +89,7 @@ public class BiomeMesa extends BiomeBase {
         IBlockData iblockdata = BiomeMesa.A;
         IBlockData iblockdata1 = this.r;
         int j1 = (int) (d0 / 3.0D + 3.0D + random.nextDouble() * 0.25D);
-        boolean flag = Math.cos(d0 / 3.0D * 3.141592653589793D) > 0.0D;
+        boolean flag = MathHelper.cos((float) (d0 / 3.0D * 3.141592653589793D)) > 0.0D; // Paper - MathHelper
         int k1 = -1;
         boolean flag1 = false;
         int l1 = 0;
diff --git a/src/main/java/net/minecraft/server/BiomeTheEndDecorator.java b/src/main/java/net/minecraft/server/BiomeTheEndDecorator.java
new file mode 100644
index 000000000..7da665e71
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeTheEndDecorator.java
@@ -0,0 +1,79 @@
+package net.minecraft.server;
+
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.collect.ContiguousSet;
+import com.google.common.collect.DiscreteDomain;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Range;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+
+public class BiomeTheEndDecorator extends BiomeDecorator {
+
+    private static final LoadingCache<Long, WorldGenEnder.Spike[]> M = CacheBuilder.newBuilder().expireAfterWrite(5L, TimeUnit.MINUTES).build(new BiomeTheEndDecorator.SpikeCache(null));
+    private final WorldGenEnder N = new WorldGenEnder();
+
+    public BiomeTheEndDecorator() {}
+
+    protected void a(BiomeBase biomebase, World world, Random random) {
+        this.a(world, random);
+        WorldGenEnder.Spike[] aworldgenender_spike = a(world);
+        WorldGenEnder.Spike[] aworldgenender_spike1 = aworldgenender_spike;
+        int i = aworldgenender_spike.length;
+
+        for (int j = 0; j < i; ++j) {
+            WorldGenEnder.Spike worldgenender_spike = aworldgenender_spike1[j];
+
+            if (worldgenender_spike.a(this.b)) {
+                this.N.a(worldgenender_spike);
+                this.N.generate(world, random, new BlockPosition(worldgenender_spike.a(), 45, worldgenender_spike.b()));
+            }
+        }
+
+    }
+
+    public static WorldGenEnder.Spike[] a(World world) {
+        Random random = new Random(world.getSeed());
+        long i = random.nextLong() & 65535L;
+
+        return (WorldGenEnder.Spike[]) BiomeTheEndDecorator.M.getUnchecked(i);
+    }
+
+    static class SpikeCache extends CacheLoader<Long, WorldGenEnder.Spike[]> {
+
+        private SpikeCache() {}
+
+        @Override
+        public WorldGenEnder.Spike[] load(Long aLong) throws Exception {
+            return this.a(aLong);
+        }
+
+        public WorldGenEnder.Spike[] a(Long olong) throws Exception {
+            ArrayList<Integer> arraylist = Lists.newArrayList(ContiguousSet.create(Range.closedOpen(0, 10), DiscreteDomain.integers()));
+
+            Collections.shuffle(arraylist, new Random(olong));
+            WorldGenEnder.Spike[] aworldgenender_spike = new WorldGenEnder.Spike[10];
+
+            for (int i = 0; i < 10; ++i) {
+                int j = (int) (42.0D * MathHelper.cos((float) (2.0D * (-3.141592653589793D + 0.3141592653589793D * (double) i)))); //Paper - MathHelper
+                int k = (int) (42.0D * MathHelper.sin((float) (2.0D * (-3.141592653589793D + 0.3141592653589793D * (double) i)))); //Paper - MathHelper
+                int l = (Integer) arraylist.get(i);
+                int i1 = 2 + l / 3;
+                int j1 = 76 + l * 3;
+                boolean flag = l == 1 || l == 2;
+
+                aworldgenender_spike[i] = new WorldGenEnder.Spike(j, k, i1, j1, flag);
+            }
+
+            return aworldgenender_spike;
+        }
+
+        SpikeCache(Object object) {
+            this();
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 12bc10ff0..9b5a7ef80 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -246,7 +246,7 @@ public class ChunkProviderHell implements ChunkGenerator {
         int l1;
 
         for (l1 = 0; l1 < i1; ++l1) {
-            adouble1[l1] = Math.cos((double) l1 * 3.141592653589793D * 6.0D / (double) i1) * 2.0D;
+            adouble1[l1] = MathHelper.cos((float) ((double) l1 * 3.141592653589793D * 6.0D / (double) i1)) * 2.0D; //Paper - MathHelper
             double d2 = (double) l1;
 
             if (l1 > i1 / 2) {
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index 286069746..3a0c814f7 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -352,8 +352,8 @@ public class EnderDragonBattle {
     private void l() {
         if (!this.e.isEmpty()) {
             int i = ((Integer) this.e.remove(this.e.size() - 1)).intValue();
-            int j = (int) (96.0D * Math.cos(2.0D * (-3.141592653589793D + 0.15707963267948966D * (double) i)));
-            int k = (int) (96.0D * Math.sin(2.0D * (-3.141592653589793D + 0.15707963267948966D * (double) i)));
+            int j = (int) (96.0D * MathHelper.cos((float) (2.0D * (-3.141592653589793D + 0.15707963267948966D * (double) i)))); //Paper - MathHelper
+            int k = (int) (96.0D * MathHelper.sin((float) (2.0D * (-3.141592653589793D + 0.15707963267948966D * (double) i)))); //Paper - MathHelper
 
             this.a(new BlockPosition(j, 75, k));
         }
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index c8c75445e..8317a2874 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -86,8 +86,8 @@ public class EntityEnderSignal extends Entity {
                 this.motY *= 0.8D;
             }
 
-            this.motX = Math.cos((double) f2) * d2;
-            this.motZ = Math.sin((double) f2) * d2;
+            this.motX = MathHelper.cos((float) f2) * d2; // Paper - MathHelper
+            this.motZ = MathHelper.sin((float) f2) * d2; // Paper - MathHelper
             if (this.locY < this.b) {
                 this.motY += (1.0D - this.motY) * 0.014999999664723873D;
             } else {
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index aa0b27f0e..bc6a004b0 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -527,9 +527,9 @@ public abstract class EntityHuman extends EntityLiving {
                 entityitem.motY = (double) (-MathHelper.sin(this.pitch * 0.017453292F) * f + 0.1F);
                 f1 = this.random.nextFloat() * 6.2831855F;
                 f = 0.02F * this.random.nextFloat();
-                entityitem.motX += Math.cos((double) f1) * (double) f;
+                entityitem.motX += MathHelper.cos((float) f1) * (double) f; //Paper - MathHelper
                 entityitem.motY += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
-                entityitem.motZ += Math.sin((double) f1) * (double) f;
+                entityitem.motZ += MathHelper.sin((float) f1) * (double) f; //Paper - MathHelper
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 1f4025486..e5c2b0c3e 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -487,8 +487,8 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         if (entity instanceof EntityLiving) {
             d6 = (double) ((EntityLiving) entity).bg;
             if (d6 > 0.0D) {
-                d7 = -Math.sin((double) (entity.yaw * 0.017453292F));
-                d8 = Math.cos((double) (entity.yaw * 0.017453292F));
+                d7 = -MathHelper.sin((float) (entity.yaw * 0.017453292F)); // Paper - MathHelper
+                d8 = MathHelper.cos((float) (entity.yaw * 0.017453292F)); // Paper - MathHelper
                 d9 = this.motX * this.motX + this.motZ * this.motZ;
                 if (d9 < 0.01D) {
                     this.motX += d7 * 0.1D;
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 50811852a..1074cee8a 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -25,9 +25,9 @@ public class EntityTNTPrimed extends Entity {
         this.setPosition(d0, d1, d2);
         float f = (float) (Math.random() * 6.2831854820251465D);
 
-        this.motX = (double) (-((float) Math.sin((double) f)) * 0.02F);
+        this.motX = (double) (-((float) MathHelper.sin((float) f)) * 0.02F); // Paper - MathHelper
         this.motY = 0.20000000298023224D;
-        this.motZ = (double) (-((float) Math.cos((double) f)) * 0.02F);
+        this.motZ = (double) (-((float) MathHelper.cos((float) f)) * 0.02F); // Paper - MathHelper
         this.setFuseTicks(80);
         this.lastX = d0;
         this.lastY = d1;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalRandomLookaround.java b/src/main/java/net/minecraft/server/PathfinderGoalRandomLookaround.java
new file mode 100644
index 000000000..2a45a9c4d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PathfinderGoalRandomLookaround.java
@@ -0,0 +1,35 @@
+package net.minecraft.server;
+
+public class PathfinderGoalRandomLookaround extends PathfinderGoal {
+
+    private final EntityInsentient a;
+    private double b;
+    private double c;
+    private int d;
+
+    public PathfinderGoalRandomLookaround(EntityInsentient entityinsentient) {
+        this.a = entityinsentient;
+        this.a(3);
+    }
+
+    public boolean a() {
+        return this.a.getRandom().nextFloat() < 0.02F;
+    }
+
+    public boolean b() {
+        return this.d >= 0;
+    }
+
+    public void c() {
+        double d0 = 6.283185307179586D * this.a.getRandom().nextDouble();
+
+        this.b = MathHelper.cos((float) d0); //Paper - MathHelper
+        this.c = MathHelper.sin((float) d0); //Paper - MathHelper
+        this.d = 20 + this.a.getRandom().nextInt(20);
+    }
+
+    public void e() {
+        --this.d;
+        this.a.getControllerLook().a(this.a.locX + this.b, this.a.locY + (double) this.a.getHeadHeight(), this.a.locZ + this.c, (float) this.a.O(), (float) this.a.N());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenBigTree.java b/src/main/java/net/minecraft/server/WorldGenBigTree.java
new file mode 100644
index 000000000..e67ffc1fc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenBigTree.java
@@ -0,0 +1,292 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+public class WorldGenBigTree extends WorldGenTreeAbstract {
+
+    private Random k;
+    private World l;
+    private BlockPosition m;
+    int a;
+    int b;
+    double c;
+    double d;
+    double e;
+    double f;
+    int g;
+    int h;
+    int i;
+    List<WorldGenBigTree.Position> j;
+
+    public WorldGenBigTree(boolean flag) {
+        super(flag);
+        this.m = BlockPosition.ZERO;
+        this.c = 0.618D;
+        this.d = 0.381D;
+        this.e = 1.0D;
+        this.f = 1.0D;
+        this.g = 1;
+        this.h = 12;
+        this.i = 4;
+    }
+
+    void a() {
+        this.b = (int) ((double) this.a * this.c);
+        if (this.b >= this.a) {
+            this.b = this.a - 1;
+        }
+
+        int i = (int) (1.382D + Math.pow(this.f * (double) this.a / 13.0D, 2.0D));
+
+        if (i < 1) {
+            i = 1;
+        }
+
+        int j = this.m.getY() + this.b;
+        int k = this.a - this.i;
+
+        this.j = Lists.newArrayList();
+        this.j.add(new WorldGenBigTree.Position(this.m.up(k), j));
+
+        for (; k >= 0; --k) {
+            float f = this.a(k);
+
+            if (f >= 0.0F) {
+                for (int l = 0; l < i; ++l) {
+                    double d0 = this.e * (double) f * ((double) this.k.nextFloat() + 0.328D);
+                    double d1 = (double) (this.k.nextFloat() * 2.0F) * 3.141592653589793D;
+                    double d2 = d0 * MathHelper.sin((float) d1) + 0.5D; //Paper - MathHelper
+                    double d3 = d0 * MathHelper.cos((float) d1) + 0.5D; //Paper - MathHelper
+                    BlockPosition blockposition = this.m.a(d2, (double) (k - 1), d3);
+                    BlockPosition blockposition1 = blockposition.up(this.i);
+
+                    if (this.a(blockposition, blockposition1) == -1) {
+                        int i1 = this.m.getX() - blockposition.getX();
+                        int j1 = this.m.getZ() - blockposition.getZ();
+                        double d4 = (double) blockposition.getY() - Math.sqrt((double) (i1 * i1 + j1 * j1)) * this.d;
+                        int k1 = d4 > (double) j ? j : (int) d4;
+                        BlockPosition blockposition2 = new BlockPosition(this.m.getX(), k1, this.m.getZ());
+
+                        if (this.a(blockposition2, blockposition) == -1) {
+                            this.j.add(new WorldGenBigTree.Position(blockposition, blockposition2.getY()));
+                        }
+                    }
+                }
+            }
+        }
+
+    }
+
+    void a(BlockPosition blockposition, float f, IBlockData iblockdata) {
+        int i = (int) ((double) f + 0.618D);
+
+        for (int j = -i; j <= i; ++j) {
+            for (int k = -i; k <= i; ++k) {
+                if (Math.pow((double) Math.abs(j) + 0.5D, 2.0D) + Math.pow((double) Math.abs(k) + 0.5D, 2.0D) <= (double) (f * f)) {
+                    BlockPosition blockposition1 = blockposition.a(j, 0, k);
+                    Material material = this.l.getType(blockposition1).getMaterial();
+
+                    if (material == Material.AIR || material == Material.LEAVES) {
+                        this.a(this.l, blockposition1, iblockdata);
+                    }
+                }
+            }
+        }
+
+    }
+
+    float a(int i) {
+        if ((float) i < (float) this.a * 0.3F) {
+            return -1.0F;
+        } else {
+            float f = (float) this.a / 2.0F;
+            float f1 = f - (float) i;
+            float f2 = MathHelper.c(f * f - f1 * f1);
+
+            if (f1 == 0.0F) {
+                f2 = f;
+            } else if (Math.abs(f1) >= f) {
+                return 0.0F;
+            }
+
+            return f2 * 0.5F;
+        }
+    }
+
+    float b(int i) {
+        return i >= 0 && i < this.i ? (i != 0 && i != this.i - 1 ? 3.0F : 2.0F) : -1.0F;
+    }
+
+    void a(BlockPosition blockposition) {
+        for (int i = 0; i < this.i; ++i) {
+            this.a(blockposition.up(i), this.b(i), Blocks.LEAVES.getBlockData().set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false)));
+        }
+
+    }
+
+    void a(BlockPosition blockposition, BlockPosition blockposition1, Block block) {
+        BlockPosition blockposition2 = blockposition1.a(-blockposition.getX(), -blockposition.getY(), -blockposition.getZ());
+        int i = this.b(blockposition2);
+        float f = (float) blockposition2.getX() / (float) i;
+        float f1 = (float) blockposition2.getY() / (float) i;
+        float f2 = (float) blockposition2.getZ() / (float) i;
+
+        for (int j = 0; j <= i; ++j) {
+            BlockPosition blockposition3 = blockposition.a((double) (0.5F + (float) j * f), (double) (0.5F + (float) j * f1), (double) (0.5F + (float) j * f2));
+            BlockLogAbstract.EnumLogRotation blocklogabstract_enumlogrotation = this.b(blockposition, blockposition3);
+
+            this.a(this.l, blockposition3, block.getBlockData().set(BlockLogAbstract.AXIS, blocklogabstract_enumlogrotation));
+        }
+
+    }
+
+    private int b(BlockPosition blockposition) {
+        int i = MathHelper.a(blockposition.getX());
+        int j = MathHelper.a(blockposition.getY());
+        int k = MathHelper.a(blockposition.getZ());
+
+        return k > i && k > j ? k : (j > i ? j : i);
+    }
+
+    private BlockLogAbstract.EnumLogRotation b(BlockPosition blockposition, BlockPosition blockposition1) {
+        BlockLogAbstract.EnumLogRotation blocklogabstract_enumlogrotation = BlockLogAbstract.EnumLogRotation.Y;
+        int i = Math.abs(blockposition1.getX() - blockposition.getX());
+        int j = Math.abs(blockposition1.getZ() - blockposition.getZ());
+        int k = Math.max(i, j);
+
+        if (k > 0) {
+            if (i == k) {
+                blocklogabstract_enumlogrotation = BlockLogAbstract.EnumLogRotation.X;
+            } else if (j == k) {
+                blocklogabstract_enumlogrotation = BlockLogAbstract.EnumLogRotation.Z;
+            }
+        }
+
+        return blocklogabstract_enumlogrotation;
+    }
+
+    void b() {
+        Iterator iterator = this.j.iterator();
+
+        while (iterator.hasNext()) {
+            WorldGenBigTree.Position worldgenbigtree_position = (WorldGenBigTree.Position) iterator.next();
+
+            this.a((BlockPosition) worldgenbigtree_position);
+        }
+
+    }
+
+    boolean c(int i) {
+        return (double) i >= (double) this.a * 0.2D;
+    }
+
+    void c() {
+        BlockPosition blockposition = this.m;
+        BlockPosition blockposition1 = this.m.up(this.b);
+        Block block = Blocks.LOG;
+
+        this.a(blockposition, blockposition1, block);
+        if (this.g == 2) {
+            this.a(blockposition.east(), blockposition1.east(), block);
+            this.a(blockposition.east().south(), blockposition1.east().south(), block);
+            this.a(blockposition.south(), blockposition1.south(), block);
+        }
+
+    }
+
+    void d() {
+        Iterator iterator = this.j.iterator();
+
+        while (iterator.hasNext()) {
+            WorldGenBigTree.Position worldgenbigtree_position = (WorldGenBigTree.Position) iterator.next();
+            int i = worldgenbigtree_position.s();
+            BlockPosition blockposition = new BlockPosition(this.m.getX(), i, this.m.getZ());
+
+            if (!blockposition.equals(worldgenbigtree_position) && this.c(i - this.m.getY())) {
+                this.a(blockposition, (BlockPosition) worldgenbigtree_position, Blocks.LOG);
+            }
+        }
+
+    }
+
+    int a(BlockPosition blockposition, BlockPosition blockposition1) {
+        BlockPosition blockposition2 = blockposition1.a(-blockposition.getX(), -blockposition.getY(), -blockposition.getZ());
+        int i = this.b(blockposition2);
+        float f = (float) blockposition2.getX() / (float) i;
+        float f1 = (float) blockposition2.getY() / (float) i;
+        float f2 = (float) blockposition2.getZ() / (float) i;
+
+        if (i == 0) {
+            return -1;
+        } else {
+            for (int j = 0; j <= i; ++j) {
+                BlockPosition blockposition3 = blockposition.a((double) (0.5F + (float) j * f), (double) (0.5F + (float) j * f1), (double) (0.5F + (float) j * f2));
+
+                if (!this.a(this.l.getType(blockposition3).getBlock())) {
+                    return j;
+                }
+            }
+
+            return -1;
+        }
+    }
+
+    public void e() {
+        this.i = 5;
+    }
+
+    public boolean generate(World world, Random random, BlockPosition blockposition) {
+        this.l = world;
+        this.m = blockposition;
+        this.k = new Random(random.nextLong());
+        if (this.a == 0) {
+            this.a = 5 + this.k.nextInt(this.h);
+        }
+
+        if (!this.f()) {
+            return false;
+        } else {
+            this.a();
+            this.b();
+            this.c();
+            this.d();
+            return true;
+        }
+    }
+
+    private boolean f() {
+        Block block = this.l.getType(this.m.down()).getBlock();
+
+        if (block != Blocks.DIRT && block != Blocks.GRASS && block != Blocks.FARMLAND) {
+            return false;
+        } else {
+            int i = this.a(this.m, this.m.up(this.a - 1));
+
+            if (i == -1) {
+                return true;
+            } else if (i < 6) {
+                return false;
+            } else {
+                this.a = i;
+                return true;
+            }
+        }
+    }
+
+    static class Position extends BlockPosition {
+
+        private final int b;
+
+        public Position(BlockPosition blockposition, int i) {
+            super(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+            this.b = i;
+        }
+
+        public int s() {
+            return this.b;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenStronghold.java b/src/main/java/net/minecraft/server/WorldGenStronghold.java
index a3b958e01..f79ce1b1f 100644
--- a/src/main/java/net/minecraft/server/WorldGenStronghold.java
+++ b/src/main/java/net/minecraft/server/WorldGenStronghold.java
@@ -130,8 +130,8 @@ public class WorldGenStronghold extends StructureGenerator {
         if (l < this.d.length) {
             for (int i1 = 0; i1 < this.d.length; ++i1) {
                 double d1 = 4.0D * this.h + this.h * (double) j * 6.0D + (random.nextDouble() - 0.5D) * this.h * 2.5D;
-                int j1 = (int) Math.round(Math.cos(d0) * d1);
-                int k1 = (int) Math.round(Math.sin(d0) * d1);
+                int j1 = (int) Math.round(MathHelper.cos((float) d0) * d1); // Paper - MathHelper
+                int k1 = (int) Math.round(MathHelper.sin((float) d0) * d1); // Paper - MathHelper
                 BlockPosition blockposition = this.g.getWorldChunkManager().a((j1 << 4) + 8, (k1 << 4) + 8, 112, this.a, random);
 
                 if (blockposition != null) {
diff --git a/src/main/java/net/minecraft/server/WorldProvider.java b/src/main/java/net/minecraft/server/WorldProvider.java
index 35d8d1a6e..5d52ca1b3 100644
--- a/src/main/java/net/minecraft/server/WorldProvider.java
+++ b/src/main/java/net/minecraft/server/WorldProvider.java
@@ -76,7 +76,7 @@ public abstract class WorldProvider {
 
         float f2 = f1;
 
-        f1 = 1.0F - (float) ((Math.cos((double) f1 * 3.141592653589793D) + 1.0D) / 2.0D);
+        f1 = 1.0F - (float) ((MathHelper.cos((float) ((double) f1 * 3.141592653589793D)) + 1.0D) / 2.0D); // Paper - MathHelper
         f1 = f2 + (f1 - f2) / 3.0F;
         return f1;
     }
-- 
2.32.0.windows.2

