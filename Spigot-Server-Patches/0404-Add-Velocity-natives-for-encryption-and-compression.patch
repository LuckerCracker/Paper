From fb18208b192825316173c9f66c2af65051e397fd Mon Sep 17 00:00:00 2001
From: LuckerCracker <luckerxd@yandex.ru>
Date: Sun, 26 Jun 2022 13:38:25 +0400
Subject: [PATCH] Add Velocity natives for encryption and compression


diff --git a/pom.xml b/pom.xml
index d60021747..82962f702 100644
--- a/pom.xml
+++ b/pom.xml
@@ -133,6 +133,13 @@
             <version>1.3</version>
             <scope>test</scope>
         </dependency>
+        <!-- for optimized protocol handling -->
+        <dependency>
+            <groupId>com.velocitypowered</groupId>
+            <artifactId>velocity-native</artifactId>
+            <version>1.1.0-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
     </dependencies>
 
     <repositories>
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 95c7eba96..a4dd5430b 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -300,8 +300,14 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     public void a(SecretKey secretkey) {
         this.o = true;
-        this.channel.pipeline().addBefore("splitter", "decrypt", new PacketDecrypter(MinecraftEncryption.a(2, secretkey)));
-        this.channel.pipeline().addBefore("prepender", "encrypt", new PacketEncrypter(MinecraftEncryption.a(1, secretkey)));
+        // Paper start
+        try {
+           this.channel.pipeline().addBefore("splitter", "decrypt", new PacketDecrypter(secretkey));
+           this.channel.pipeline().addBefore("prepender", "encrypt", new PacketEncrypter(secretkey));
+        } catch (java.security.GeneralSecurityException e) {
+            throw new RuntimeException("Couldn't enable encryption", e);
+        }
+        // Paper end
     }
 
     public boolean isConnected() {
diff --git a/src/main/java/net/minecraft/server/PacketCompressor.java b/src/main/java/net/minecraft/server/PacketCompressor.java
new file mode 100644
index 000000000..8d502a560
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketCompressor.java
@@ -0,0 +1,51 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToByteEncoder;
+
+public class PacketCompressor extends MessageToByteEncoder<ByteBuf> {
+    // Paper start
+    private final com.velocitypowered.natives.compression.VelocityCompressor compressor;
+    private int c;
+
+    public PacketCompressor(int i) {
+        this.c = i;
+        this.compressor = com.velocitypowered.natives.util.Natives.compress.get().create(-1);
+    }
+
+    @Override
+    protected void encode(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, ByteBuf bytebuf1) throws Exception {
+        int i = bytebuf.readableBytes();
+        PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf1);
+
+        if (i < this.c) {
+            packetdataserializer.d(0);
+            packetdataserializer.writeBytes(bytebuf);
+        } else {
+            packetdataserializer.d(i);
+            ByteBuf source = com.velocitypowered.natives.util.MoreByteBufUtils.ensureCompatible(channelhandlercontext.alloc(), this.compressor, bytebuf);
+            try {
+                this.compressor.deflate(source, bytebuf1);
+
+            } finally {
+                source.release();
+            }
+        }
+
+    }
+
+    @Override
+    protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, ByteBuf msg, boolean preferDirect) throws Exception {
+        return com.velocitypowered.natives.util.MoreByteBufUtils.preferredBuffer(ctx.alloc(), this.compressor, msg.readableBytes() + 1);
+    }
+
+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
+        this.compressor.close();
+    }
+
+    public void a(int i) {
+        this.c = i;
+    }
+    // Paper end
+}
diff --git a/src/main/java/net/minecraft/server/PacketDecompressor.java b/src/main/java/net/minecraft/server/PacketDecompressor.java
new file mode 100644
index 000000000..b491cee33
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketDecompressor.java
@@ -0,0 +1,65 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.ByteToMessageDecoder;
+import io.netty.handler.codec.DecoderException;
+
+import java.util.List;
+
+public class PacketDecompressor extends ByteToMessageDecoder {
+    // Paper Start
+    private final com.velocitypowered.natives.compression.VelocityCompressor compressor; // Paper
+    private int b;
+
+    public PacketDecompressor(int i) {
+        this.b = i;
+        this.compressor = com.velocitypowered.natives.util.Natives.compress.get().create(-1);
+    }
+
+    @Override
+    protected void decode(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, List<Object> list) throws Exception {
+        if (bytebuf.readableBytes() != 0) {
+            PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+            int i = packetdataserializer.g();
+
+            if (i == 0) {
+                list.add(packetdataserializer.readBytes(packetdataserializer.readableBytes()));
+            } else {
+                if (i < this.b) {
+                    throw new DecoderException("Badly compressed packet - size of " + i + " is below server threshold of " + this.b);
+                }
+
+                if (i > 2097152) {
+                    throw new DecoderException("Badly compressed packet - size of " + i + " is larger than protocol maximum of " + 2097152);
+                }
+
+                // Paper start
+                ByteBuf compatibleIn = com.velocitypowered.natives.util.MoreByteBufUtils.ensureCompatible(channelhandlercontext.alloc(), compressor, bytebuf);
+                ByteBuf uncompressed = com.velocitypowered.natives.util.MoreByteBufUtils.preferredBuffer(channelhandlercontext.alloc(), compressor, i);
+                try {
+                    compressor.inflate(compatibleIn, uncompressed, i);
+                    list.add(uncompressed);
+                    bytebuf.clear();
+                } catch (Exception e) {
+                    uncompressed.release();
+                    throw e;
+                } finally {
+                    compatibleIn.release();
+                }
+                // Paper end
+            }
+
+        }
+    }
+
+    @Override
+    public void handlerRemoved0(ChannelHandlerContext ctx) throws Exception {
+        this.compressor.close();
+    }
+
+    public void a(int i) {
+        this.b = i;
+    }
+    // Paper end
+}
diff --git a/src/main/java/net/minecraft/server/PacketDecrypter.java b/src/main/java/net/minecraft/server/PacketDecrypter.java
new file mode 100644
index 000000000..1b0e2b041
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketDecrypter.java
@@ -0,0 +1,29 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToMessageDecoder;
+
+import java.util.List;
+
+public class PacketDecrypter extends MessageToMessageDecoder<ByteBuf> {
+    // Paper Start
+    private final com.velocitypowered.natives.encryption.VelocityCipher cipher;
+
+    public PacketDecrypter(javax.crypto.SecretKey key) throws java.security.GeneralSecurityException {
+        this.cipher = com.velocitypowered.natives.util.Natives.cipher.get().forDecryption(key);
+    }
+
+    @Override
+    protected void decode(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, List<Object> list) throws Exception {
+        ByteBuf compatible = com.velocitypowered.natives.util.MoreByteBufUtils.ensureCompatible(channelhandlercontext.alloc(), cipher, bytebuf).slice();
+        try {
+            cipher.process(compatible);
+            list.add(compatible);
+        } catch (Exception e) {
+            compatible.release(); // compatible will never be used if we throw an exception
+            throw e;
+        }
+    }
+    //Paper End
+}
diff --git a/src/main/java/net/minecraft/server/PacketEncrypter.java b/src/main/java/net/minecraft/server/PacketEncrypter.java
new file mode 100644
index 000000000..92848dc7b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketEncrypter.java
@@ -0,0 +1,31 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToMessageEncoder;
+
+public class PacketEncrypter extends MessageToMessageEncoder<ByteBuf> {
+    // Paper Start
+    private final com.velocitypowered.natives.encryption.VelocityCipher cipher;
+
+    public PacketEncrypter(javax.crypto.SecretKey key) throws java.security.GeneralSecurityException {
+        this.cipher = com.velocitypowered.natives.util.Natives.cipher.get().forEncryption(key);
+    }
+
+    @Override
+    protected void encode(ChannelHandlerContext ctx, ByteBuf msg, java.util.List<Object> out) throws Exception {
+        ByteBuf compatible = com.velocitypowered.natives.util.MoreByteBufUtils.ensureCompatible(ctx.alloc(), this.cipher, msg);
+        try {
+            this.cipher.process(compatible);
+            out.add(compatible);
+        } catch (Exception e) {
+            compatible.release(); // compatible will never be used if we throw an exception
+            throw e;
+        }
+    }
+
+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
+        this.cipher.close();
+    }
+    // Paper End
+}
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 4a629aaa1..37ad7f2c9 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -92,7 +92,12 @@ public class ServerConnection {
                 ServerConnection.e.info("Using default channel type");
             }
 
-            this.g.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer() {
+            // Paper start - indicate Velocity natives in use
+            ServerConnection.e.info("Paper: Using " + com.velocitypowered.natives.util.Natives.compress.getLoadedVariant() + " compression from Velocity.");
+            ServerConnection.e.info("Paper: Using " + com.velocitypowered.natives.util.Natives.cipher.getLoadedVariant() + " cipher from Velocity.");
+            // Paper end
+
+            this.g.add((new ServerBootstrap()).channel(oclass).childHandler(new ChannelInitializer() {
                 protected void initChannel(Channel channel) throws Exception {
                     try {
                         channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
@@ -107,7 +112,7 @@ public class ServerConnection {
                     channel.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.setPacketListener(new HandshakeListener(ServerConnection.this.f, networkmanager));
                 }
-            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i).bind().syncUninterruptibly());
         }
     }
 
-- 
2.32.0.windows.2

